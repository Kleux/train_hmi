import os
import pygubu
import tkinter as tk
import tkinter.ttk as ttk
import socket

PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
PROJECT_UI = os.path.join(PROJECT_PATH, "mnui.ui")
def konnect(ipt,prot,val,cmd):
        print(ipt +" "+ prot +" "+ val)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ipt, int(prot)))
        sock.send(str.encode(cmd + val + ","))
        sock.close()
def konnect2(ipt,prot,val,val2,cmd):
        print(ipt +" "+ prot +" "+ val + " " + val2)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ipt, int(prot)))
        sock.send(str.encode(cmd + val +":"+ val2 +","))
        sock.close()
class MnuiApp:
    def __init__(self, master=None):
        # build ui
        self.rame = ttk.Frame(master)
        self.ram = ttk.Frame(self.rame)
        self.entry10 = ttk.Entry(self.ram)
        _text_ = '''192.168.0.101'''
        self.entry10.delete('0', 'end')
        self.entry10.insert('0', _text_)
        self.entry10.place(anchor='nw', relx='0.0', rely='0.0', x='60')
        self.conn_label = ttk.Label(self.ram)
        boolvals=('YES','NO')
        self.conn_label.configure(text='Set ip')
        self.conn_label.place(anchor='nw', x='0', y='0')
        self.label16 = ttk.Label(self.ram)
        self.label16.configure(text='Set port')
        self.label16.place(anchor='nw', x='200', y='0')
        self.prt = ttk.Entry(self.ram)
        self.prt.configure(font='TkTextFont')
        _text_ = '''2112'''
        self.prt.delete('0', 'end')
        self.prt.insert('0', _text_)
        self.prt.place(anchor='nw', x='300', y='0')
        self.label17 = ttk.Label(self.ram)
        self.label17.configure(takefocus=True, text='Brake Pressure')
        self.label17.place(anchor='nw', x='0', y='60')
        self.label18 = ttk.Label(self.ram)
        self.label18.configure(text='Flasher Indicator')
        self.label18.place(anchor='nw', x='0', y='100')
        self.label19 = ttk.Label(self.ram)
        self.label19.configure(text='S = Stop/M = Move')
        self.label19.place(anchor='nw', x='0', y='140')
        self.label20 = ttk.Label(self.ram)
        self.label20.configure(text='X=Armed/O=Open')
        self.label20.place(anchor='nw', x='0', y='180')
        self.label21 = ttk.Label(self.ram)
        self.label21.configure(text='Cab unit voltage')
        self.label21.place(anchor='nw', x='0', y='220')
        self.label22 = ttk.Label(self.ram)
        self.label22.configure(text='Rear Unit Battery Life')
        self.label22.place(anchor='nw', x='0', y='260')
        self.label23 = ttk.Label(self.ram)
        self.label23.configure(text='Train Status')
        self.label23.place(anchor='nw', x='0', y='300')
        self.label24 = ttk.Label(self.ram)
        self.label24.configure(text='Train Length')
        self.label24.place(anchor='nw', x='0', y='340')
        self.label25 = ttk.Label(self.ram)
        self.label25.configure(text='Rear Unit ID')
        self.label25.place(anchor='nw', x='0', y='380')
        self.label26 = ttk.Label(self.ram)
        self.label26.configure(text='Time from gps clock')
        self.label26.place(anchor='nw', x='0', y='420')
        self.label27 = ttk.Label(self.ram)
        self.label27.configure(text='Brake pipe pressure in SBU')
        self.label27.place(anchor='nw', x='0', y='460')
        self.label28 = ttk.Label(self.ram)
        self.label28.configure(text='Fouling mark clear indicator')
        self.label28.place(anchor='nw', x='0', y='500')
        self.cmd01_b = ttk.Spinbox(self.ram)
        self.cmd01_b.configure(font='TkHeadingFont', from_='0', increment='1', to='40')
        _text_ = '''0'''
        self.cmd01_b.delete('0', 'end')
        self.cmd01_b.insert('0', _text_)
        self.cmd01_b.place(anchor='nw', x='180', y='60')
        self.cmd02_b = ttk.Combobox(self.ram)
        self.cmd02_b.configure(state='normal', values=boolvals)
        self.cmd02_b.place(anchor='nw', x='180', y='100')
        self.cmd03_b = ttk.Combobox(self.ram)
        self.cmd03_b.configure(values=boolvals)
        self.cmd03_b.place(anchor='nw', x='180', y='140')
        self.cmd04_b = ttk.Combobox(self.ram)
        self.cmd04_b.configure(values=boolvals)
        self.cmd04_b.place(anchor='nw', x='180', y='180')
        self.cmd05_b = ttk.Spinbox(self.ram)
        self.cmd05_b.configure(from_='0', increment='1', to='40', validate='none')
        _text_ = '''0'''
        self.cmd05_b.delete('0', 'end')
        self.cmd05_b.insert('0', _text_)
        self.cmd05_b.place(anchor='nw', x='180', y='220')
        self.cmd06_b = ttk.Spinbox(self.ram)
        self.cmd06_b.configure(from_='0', increment='1', to='99')
        _text_ = '''0'''
        self.cmd06_b.delete('0', 'end')
        self.cmd06_b.insert('0', _text_)
        self.cmd06_b.place(anchor='nw', x='180', y='260')
        self.cmd07_b = ttk.Combobox(self.ram)
        self.cmd07_b.configure(values=boolvals)
        self.cmd07_b.place(anchor='nw', x='180', y='300')
        self.cmd08_b = ttk.Spinbox(self.ram)
        self.cmd08_b.configure(from_='0', increment='1', to='8888', validate='none')
        _text_ = '''0'''
        self.cmd08_b.delete('0', 'end')
        self.cmd08_b.insert('0', _text_)
        self.cmd08_b.place(anchor='nw', x='180', y='340')
        self.cmd09_b = ttk.Spinbox(self.ram)
        self.cmd09_b.configure(from_='0', increment='1', to='9998')
        _text_ = '''0'''
        self.cmd09_b.delete('0', 'end')
        self.cmd09_b.insert('0', _text_)
        self.cmd09_b.place(anchor='nw', x='180', y='380')
        self.cmd10_b_hr = ttk.Spinbox(self.ram)
        self.cmd10_b_hr.configure(from_='0', increment='1', to='24')
        _text_ = '''0'''
        self.cmd10_b_hr.delete('0', 'end')
        self.cmd10_b_hr.insert('0', _text_)
        self.cmd10_b_hr.place(anchor='nw', relwidth='0.08', x='180', y='420')
        self.cmd10_b_min = ttk.Spinbox(self.ram)
        self.cmd10_b_min.configure(from_='0', increment='1', justify='left', to='59')
        _text_ = '''0'''
        self.cmd10_b_min.delete('0', 'end')
        self.cmd10_b_min.insert('0', _text_)
        self.cmd10_b_min.place(anchor='nw', relwidth='0.08', x='260', y='420')
        self.label29 = ttk.Label(self.ram)
        self.label29.configure(text='(hour)')
        self.label29.place(anchor='nw', x='140', y='420')
        self.label30 = ttk.Label(self.ram)
        self.label30.configure(text='(mins)')
        self.label30.place(anchor='nw', x='325', y='420')
        self.cmd11_b = ttk.Spinbox(self.ram)
        self.cmd11_b.configure(from_='0', increment='1', to='50', validate='none')
        _text_ = '''0'''
        self.cmd11_b.delete('0', 'end')
        self.cmd11_b.insert('0', _text_)
        self.cmd11_b.place(anchor='nw', x='180', y='460')
        self.cmd12_b = ttk.Combobox(self.ram)
        self.cmd12_b.configure(values=boolvals)
        self.cmd12_b.place(anchor='nw', x='180', y='500')
        self.cmd01_btn = ttk.Button(self.ram,command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd01_b.get(),"CMD01_"))
        self.cmd01_btn.configure(text='CMD1 Send')
        self.cmd01_btn.place(anchor='nw', relheight='0.05', x='350', y='50')
        self.cmd02_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd02_b.get(),"CMD02_"))
        self.cmd02_btn.configure(text='CMD2 Send')
        self.cmd02_btn.place(anchor='nw', x='350', y='95')
        self.cmd03_btn = ttk.Button(self.ram,command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd03_b.get(),"CMD03_"))
        self.cmd03_btn.configure(text='CMD3 Send')
        self.cmd03_btn.place(anchor='nw', x='350', y='135')
        self.cmd04_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd04_b.get(),"CMD04_"))
        self.cmd04_btn.configure(text='CMD4 Send')
        self.cmd04_btn.place(anchor='nw', x='350', y='175')
        self.cmd_05_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd05_b.get(),"CMD05_"))
        self.cmd_05_btn.configure(text='CMD5 Send')
        self.cmd_05_btn.place(anchor='nw', x='350', y='215')
        self.cmd_06_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd06_b.get(),"CMD06_"))
        self.cmd_06_btn.configure(text='CMD6 Send')
        self.cmd_06_btn.place(anchor='nw', x='350', y='255')
        self.cmd07_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd07_b.get(),"CMD07_"))
        self.cmd07_btn.configure(text='CMD7 Send')
        self.cmd07_btn.place(anchor='nw', x='350', y='295')
        self.cmd08_btn = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd08_b.get(),"CMD08_"))
        self.cmd08_btn.configure(text='CMD8 Send')
        self.cmd08_btn.place(anchor='nw', x='350', y='335')
        self.button9 = ttk.Button(self.ram, command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd09_b.get(),"CMD09_"))
        self.button9.configure(text='CMD9 Send')
        self.button9.place(anchor='nw', x='350', y='375')
        self.cmd10_btn = ttk.Button(self.ram, command= lambda:konnect2(self.entry10.get(),self.prt.get(),self.cmd10_b_hr.get(),self.cmd10_b_min.get(),"CMD10_"))
        self.cmd10_btn.configure(text='CMD10 Send')
        self.cmd10_btn.place(anchor='nw', x='360', y='415')
        self.cmd11_btn = ttk.Button(self.ram,command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd11_b.get(),"CMD11_"))
        self.cmd11_btn.configure(text='CMD11 Send')
        self.cmd11_btn.place(anchor='nw', x='350', y='455')
        self.cmd12_btn = ttk.Button(self.ram,command= lambda:konnect(self.entry10.get(),self.prt.get(),self.cmd12_b.get(),"CMD12_"))
        self.cmd12_btn.configure(text='CMD12 Send')
        self.cmd12_btn.place(anchor='nw', x='350', y='495')
        self.ram.configure(height='600', width='800')
        self.ram.pack(side='top')
        self.ram.bind('<1>', self.callback, add='')
        self.rame.configure(height='200', width='200')
        self.rame.pack(side='top')

        # Main widget
        self.mainwindow = self.rame
    
    def callback(self, event=None):
        pass

    def run(self):
        self.mainwindow.mainloop()


if __name__ == '__main__':
    root = tk.Tk()
    app = MnuiApp(root)
    app.run()

